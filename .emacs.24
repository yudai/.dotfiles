;;; hide toolbar
(setq tool-bar-mode)

;;; auto-complete
;(require 'auto-complete)
;(global-auto-complete-mode t)


;;; yasnippet
(require 'yasnippet-bundle)
 (require 'dropdown-list)
       (setq yas/prompt-functions '(yas/dropdown-prompt
                                    yas/ido-prompt
                                    yas/completing-prompt))

;;; anything
(require 'anything-config)
(anything-iswitchb-setup)
(setq anything-sources
      (list anything-c-source-buffers
            anything-c-source-bookmarks
            anything-c-source-file-name-history
            anything-c-source-man-pages
            anything-c-source-info-pages
            anything-c-source-calculation-result
            anything-c-source-locate))
(global-set-key "\C-x\C-j" 'anything)

(when (and (>= emacs-major-version 23) window-system)
  (global-set-key "\C-z" 'ignore)
  (set-frame-parameter nil 'alpha 80)
  (setq initial-frame-alist '((width . 169) (height . 60) (top . 0) (left . 50)))
 (set-face-attribute 'default nil
                     :family "monaco"
                     :height 100)
 (set-fontset-font
  (frame-parameter nil 'font)
  'japanese-jisx0208
  '("Hiragino Maru Gothic Pro" . "iso10646-1"))
 (set-fontset-font
  (frame-parameter nil 'font)
  'japanese-jisx0212
  '("Hiragino Maru Gothic Pro" . "iso10646-1"))
 (set-fontset-font
  (frame-parameter nil 'font)
  'mule-unicode-0100-24ff
  '("monaco" . "iso10646-1"))
 (setq face-font-rescale-alist
      '(("^-apple-hiragino.*" . 1.2)
        (".*osaka-bold.*" . 1.2)
        (".*osaka-medium.*" . 1.2)
        (".*courier-bold-.*-mac-roman" . 1.0)
        (".*monaco cy-bold-.*-mac-cyrillic" . 0.9)
        (".*monaco-bold-.*-mac-roman" . 0.9)
        ("-cdac$" . 1.3))))


(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(package-initialize)

(require 'cl)

(defvar installing-package-list
  '(
    clojure-mode
    go-mode
    ))

(let ((not-installed (loop for x in installing-package-list
                            when (not (package-installed-p x))
                            collect x)))
  (when not-installed
    (package-refresh-contents)
    (dolist (pkg not-installed)
        (package-install pkg))))